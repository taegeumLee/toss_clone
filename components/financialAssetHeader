"use client";

import { useSearchParams } from "next/navigation";
import { DOMESTIC_TICKERS, OVERSEAS_TICKERS } from "@/constants/stockTickers";
import { useEffect, useState } from "react";
import { StockData } from "@/types/stock";
import { motion } from "framer-motion";
import StockChart from "./StockChart";

export default function FinancialAssetHeader() {
  const searchParams = useSearchParams();
  const market = searchParams.get("market") || "all";
  const [stockData, setStockData] = useState<{
    overseas: StockData[];
    domestic: StockData[];
  }>({ overseas: [], domestic: [] });
  const [isLoading, setIsLoading] = useState(true);
  const [currentPage, setCurrentPage] = useState(0);
  const itemsPerPage = 3;

  useEffect(() => {
    const fetchStockData = async () => {
      setIsLoading(true);
      try {
        const tickers =
          market === "overseas"
            ? OVERSEAS_TICKERS
            : market === "domestic"
            ? DOMESTIC_TICKERS
            : [...DOMESTIC_TICKERS, ...OVERSEAS_TICKERS];

        const response = await fetch(
          `/api/stock/getStocks?tickers=${tickers.join(",")}`
        );
        const data = await response.json();

        setStockData({
          overseas: data.slice(0, OVERSEAS_TICKERS.length),
          domestic: data.slice(OVERSEAS_TICKERS.length),
        });
      } catch (error) {
        console.error("주식 데이터 조회 실패:", error);
      } finally {
        setIsLoading(false);
      }
    };

    fetchStockData();
  }, [market]);

  const stocksToShow =
    market === "overseas"
      ? stockData.overseas
      : market === "domestic"
      ? stockData.domestic
      : [...stockData.domestic, ...stockData.overseas];

  const totalPages = Math.ceil(stocksToShow.length / itemsPerPage);

  return (
    <motion.div
      className="w-full overflow-hidden px-4"
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
    >
      <motion.div
        className="flex gap-4"
        animate={{ x: -currentPage * 100 + "%" }}
        transition={{ type: "spring", stiffness: 300, damping: 30 }}
      >
        {stocksToShow.map((stock, index) => (
          <motion.div
            key={`${stock.ticker}-${index}`}
            className="min-w-[calc(33.333% - 1rem)]"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: index * 0.1 }}
          >
            <StockChart
              stocks={[stock]}
              isLoading={isLoading}
              market={market}
            />
          </motion.div>
        ))}
      </motion.div>

      <div className="flex justify-center gap-2 mt-4">
        {Array.from({ length: totalPages }).map((_, i) => (
          <button
            key={i}
            onClick={() => setCurrentPage(i)}
            className={`w-2 h-2 rounded-full ${
              currentPage === i ? "bg-blue-500" : "bg-gray-500"
            }`}
          />
        ))}
      </div>
    </motion.div>
  );
}
